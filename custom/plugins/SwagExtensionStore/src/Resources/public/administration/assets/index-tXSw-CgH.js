const n=`{% block sw_extension_store_listing_filter %} <div class="sw-extension-store-listing-filter"> <template v-if="!isLoading"> {% block sw_extension_store_listing_filter_content %} {% block sw_extension_store_listing_filter_sorting %} <sw-meteor-single-select class="sw-extension-store-listing-filter__sorting" size="small" :label="$t('sw-extension.store.listing.sort')" :options="sortingOptions" value-property="orderIdentifier" :value="sortingValue" @update:value="setSelectedSorting" /> {% endblock %} {% block sw_extension_store_listing_all_filters %} <sw-meteor-single-select v-for="filter in listingFiltersSorted" :key="filter.name" class="sw-extension-store-listing-filter__filters" size="small" :label="filter.label" :options="getOptionsForFilter(filter)" :value="getValueForFilter(filter)" @update:value="changeValueForFilter(filter, $event)" > <template v-if="filter.type === 'category'" #result-label-property="{ item, valueProperty }" > {% block sw_extension_store_listing_filter_category_filter_result %} <div v-if="item[valueProperty] !== null" :class="{ 'is--root-category': isRootCategory(item) }" :style="{ 'padding-left': isRootCategory(item) ? '0': \`\${categoryDepth(item)}em\` }" > {{ item.label }} </div> {% endblock %} </template> </sw-meteor-single-select> {% endblock %} {% endblock %} </template> <template v-else> <sw-loader /> </template> </div> {% endblock %}`,{Criteria:l}=Shopware.Data,o={template:n,mixins:["notification"],inject:["extensionStoreDataService"],data(){return{isLoading:!0,listingFilters:[],listingSorting:{}}},computed:{search(){return Shopware.Store.get("shopwareExtensions").search},activeFilters:{get(){return Shopware.Store.get("shopwareExtensions").search.filter},set(e){Shopware.Store.get("shopwareExtensions").search.filter=e}},sortingOptions(){return this.listingSorting.options?this.listingSorting.options.map(e=>(e.orderIdentifier=`${e.orderBy}##${e.orderSequence}`,e)):[]},defaultSortingValue(){return this.listingSorting.default?`${this.listingSorting.default.orderBy}##${this.listingSorting.default.orderSequence}`:null},sortingValue(){const e=this.search.sorting&&this.search.sorting.field,i=this.search.sorting&&this.search.sorting.order;return!e||!i?this.defaultSortingValue:`${e}##${i}`},listingFiltersSorted(){const e=Shopware.Utils.object.cloneDeep(this.listingFilters);e.sort((t,r)=>t.position-r.position),e.forEach(t=>{t.options.sort((r,s)=>r.position-s.position)});const i=e.find(t=>t.type==="category");return i&&(i.options=this.getOrderedCategories(i.options)),e}},created(){this.createdComponent()},methods:{createdComponent(){this.fetchListingFilters()},fetchListingFilters(){return this.extensionStoreDataService.listingFilters().then(({filter:e,sorting:i})=>{this.listingFilters=e,this.listingSorting=i}).catch(e=>{this.createNotificationError({message:e})}).finally(()=>{this.isLoading=!1})},getValueForFilter(e){return this.activeFilters[e.name]||null},changeValueForFilter(e,i){if(!i){this.$delete(this.activeFilters,e.name);return}this.activeFilters[e.name]=i},getOptionsForFilter(e){return[{label:this.$t("sw-extension.store.listing.anyOption"),value:null},...e.options]},setSelectedSorting(e){const[i,t]=e.split("##");Shopware.Store.get("shopwareExtensions").setSearchValue({key:"sorting",value:l.sort(i,t)})},isRootCategory(e){return e.parent===null||typeof e.parent>"u"},categoryDepth(e){let i=0,t=this.getCategoryByName(e.parent);for(;t;)i+=1,t=this.getCategoryByName(t.parent)?this.getCategoryByName(t.parent):null;return i},getCategoryByName(e){return this.listingFilters.find(t=>t.type==="category").options.find(t=>t.label===e||t.value===e||t.name===e)},getOrderedCategories(e){const i=new Map;return i.set(null,{value:null,children:[]}),e.forEach(t=>{i.set(t.value,{value:t,children:[]})}),e.forEach(t=>{i.get(t.parent).children.push(i.get(t.value))}),this.flatTree(i.get(null))},flatTree(e){const i=e.value?[e.value]:[];return e.children.sort((t,r)=>t.value.position-r.value.position).forEach(t=>i.push(...this.flatTree(t))),i}}};export{o as default};
