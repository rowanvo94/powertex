const i=`{% block sw_in_app_purchase_checkout_modal %} <sw-modal v-if="store.entry" class="sw-in-app-purchase-checkout" :title="$t('sw-in-app-purchase-checkout.modalTitle')" @modal-close="handleStateActions(false)" > <template v-if="state === 'purchase'" #modal-title> <sw-extension-icon class="sw-in-app-purchase-checkout__icon" :src="extensionIcon" /> <div class="sw-in-app-purchase-checkout__titles"> <h4 id="modalTitleEl" class="sw-modal__title"> {{ $t('sw-in-app-purchase-checkout.modalTitle') }} </h4> <h5 class="sw-modal__subtitle"> {{ extension.label }} </h5> </div> </template> <sw-in-app-purchase-checkout-overview v-if="state === 'purchase'" v-model:tos-accepted="tosAccepted" v-model:gtc-accepted="gtcAccepted" v-model:variant="variant" :purchase="purchase" :producer="extension.producerName" /> <sw-in-app-purchase-checkout-state v-if="['loading', 'success', 'error'].includes(state)" :state="state" :error-snippet="errorMessage" /> <template #modal-footer> <sw-in-app-purchase-checkout-button :state="state" :tos-accepted="tosAccepted" :gtc-accepted="gtcAccepted" :variant="variant" @click="handleStateActions(true)" /> </template> </sw-modal> {% endblock %}`,a=Shopware.Component.wrapComponentConfig({template:i,inject:["inAppPurchasesService"],mixins:[Shopware.Mixin.getByName("notification")],data(){return{state:"loading",store:Shopware.Store.get("inAppPurchaseCheckout"),inAppPurchaseCart:null,extension:null,purchase:null,tosAccepted:!1,gtcAccepted:!1,variant:null,errorMessage:null}},created(){this.createdComponent()},computed:{assetFilter(){return Shopware.Filter.getByName("asset")},extensionIcon(){var e,t;return(e=this.extension)!=null&&e.icon?this.extension.icon:(t=this.extension)!=null&&t.iconRaw?`data:image/png;base64, ${this.extension.iconRaw}`:this.assetFilter("/swagextensionstore/administration/static/img/theme/default_theme_preview.jpg")}},methods:{createdComponent(){this.store.$subscribe(()=>{this.requestFeature()})},async requestFeature(){if(!this.store.extension||!this.store.entry){this.reset();return}this.state="loading",await Promise.all([this.inAppPurchasesService.getExtension(this.store.extension),this.inAppPurchasesService.getPriceModels(this.store.extension,this.store.entry.identifier)]).then(([e,t])=>{this.purchase=t,this.extension=e,this.state="purchase"}).catch(e=>{Shopware.Utils.debug.error(e),this.errorMessage=this.getError(e),this.state="error"})},onPurchaseFeature(){if(!this.store.extension||!this.store.entry||!this.variant){this.reset();return}this.inAppPurchasesService.createCart(this.store.extension,this.store.entry.identifier,this.variant).then(e=>{var t;return this.inAppPurchasesService.orderCart(e==null?void 0:e.taxRate,e==null?void 0:e.positions,(t=this.extension)==null?void 0:t.name)}).then(()=>{this.state="success"}).catch(e=>{Shopware.Utils.debug.error(e),this.errorMessage=this.getError(e),this.state="error"})},handleStateActions(e){switch(this.state){case"purchase":e?this.onPurchaseFeature():this.reset();break;case"error":e?this.requestFeature():this.reset();break;case"success":this.reset(),this.inAppPurchasesService.refreshInAppPurchases().then(()=>{window.location.reload()});break;default:this.reset();break}},getError(e){var t,s;return((s=(t=e==null?void 0:e.response)==null?void 0:t.data.errors[0])==null?void 0:s.detail)??null},reset(){this.store.dismiss(),this.inAppPurchaseCart=null,this.extension=null,this.errorMessage=null,this.state="loading",this.purchase=null,this.variant=null,this.tosAccepted=!1,this.gtcAccepted=!1}}});export{a as default};
